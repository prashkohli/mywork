#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *left;
    struct node *right;
};


struct queue {
    struct node *T;
    struct queue *next;
};



struct stack {
    struct node *T;
    struct stack *next;
};




struct stack *top = NULL;
struct queue *front = NULL;
struct queue *rear = NULL;

struct node *createNode(int data)
{
    struct node *newnode;
    newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->left = newnode -> right = NULL;
    return newnode;
}

struct node *insert(struct node *root,int data)
{
    if(root==NULL)
    {
        root = createNode(data);
    }
    else if(data < root->data)
    {
        root->left = insert(root->left,data);
    }
    else
    {
        root->right = insert(root->right,data);
    }
    return root;
}

int search(struct node *root, int target)
{
    int c = 0;
    while(root!=NULL)
    {
        if(root->data==target)
        {
            return 1;
        }
        else if(target < root->data)
        {
            root = root->left;
        }
        else
        {
            root = root -> right;
        }
    }
    return c;
    

}

void inorderTraversal(struct node *root){
    if(root == NULL)
    {
     return;
    }
    else
    {
        inorderTraversal(root->left);
        printf("%d ",root->data);
        inorderTraversal(root->right);
    }
}

void preorderTraversal(struct node *root){
    if(root == NULL)
    {
     return;
    }
    else
    {
        printf("%d ",root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

void postorderTraversal(struct node *root){
    if(root == NULL)
    {
       return;
    }
    else
    {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ",root->data);
    }
}


void push(struct node *root)
{
    struct stack *newnode;
    newnode = (struct stack*)malloc(sizeof(struct stack));
    newnode->T=root;
    newnode->next = NULL;
    if(top==NULL)
    {
        top = newnode;
        newnode->next = NULL;
    }
    else{
       newnode ->next = top;
       top = newnode;
    }

}
struct node *pop(){
    struct node *temp;
    if(top==NULL)
    {
        printf("Stack is empty");
    }
    else{
        temp = top -> T;
        top = top ->next;
        return temp;
    }
}




void inorder(struct node *root)
{
    struct node *t;
    while(root!=NULL)
    {
        push(root);
        root = root->left;
    }
    while(top!=NULL)
    {
        t = pop();
        printf("%d ",t->data);
        t = t -> right;
        while(t!=NULL)
        {
            push(t);
            t = t -> left;
        }
    }
}

void preorder(struct node *root) {
    struct node *t;
    while(root!=NULL)
    {  
        printf("%d ",root->data);
        push(root);
        root = root -> left;
    }
    while(top!=NULL)
    {
        t = pop();
        t = t -> right;
        while(t!=NULL)
        {
            printf("%d ",t->data);
            push(t);
            t = t -> left;
        }
    }

}

void postorder(struct node *root)
{
    struct node *t;
    struct node *prev;
    while(root!=NULL)
    {
        push(root);
        root = root ->left;
    }
    while (top!=NULL)
    {
        t = pop();
        if(t->right==NULL || t->right == prev)
        {
            printf("%d ",t->data);
            prev = t;
        }
        else
        {
            push(t);
            t = t->right;
            while(t!=NULL)
            {
                push(t);
                t = t->left;
            }
        }
    }
    
}

struct node *findMax(struct node *root)
{
    while(root->right!=NULL)
    {
        root = root->right;
    }
    return root;
}

struct node *DeleteBST(struct node *root,int target)
{
    struct node *temp;
    if(root==NULL)
    {
        return NULL;
    }
    else if(root->data > target)
    {
        root->left = DeleteBST(root->left,target);
    }
    else if(root->data < target)
    {
        root->right = DeleteBST(root->right,target);
    }
    else
    {
        if(root->right!=NULL && root->left!=NULL)
        {
            temp = findMax(root->left);
            root->data=temp->data;
            root->left=DeleteBST(root->left,temp->data);
        }
        else 
        {
            temp = root;
            if(root->left==NULL)
            {
                root = root->right;
            }
            else if (root->right==NULL)
            {
               root = root->left;
            }
            free(temp);
        }
    }
    return root;
}

void pushQueue(struct node *root)
{
    struct queue *newnode;
    struct queue *temp;
    newnode = (struct queue*)malloc(sizeof(struct queue));
    newnode->T=root;
    newnode->next = NULL;
    if(rear==NULL && front==NULL)
    {
        front = rear = newnode;
        
    }
    else{
       rear ->next = newnode;
       rear = newnode;
    }

}

struct node * popQueue()
{
    struct node *temp;
    if(front==NULL)
    {
        printf("queue is empty");
    }
    else{
        temp = front ->T;
        front = front ->next;
        if(front==NULL)
        {
            rear=NULL;
        }
        return temp;
    }
}

// struct node* mirrorTree(struct node* root) {
//     if (root == NULL)
//         return;

//     push(root);

//     while (top!=NULL) {
//         struct node* t = pop();
//         struct node* temp =t->left;
//         t->left = t->right;
//         t->right = temp;
//         // Push left child
//         if (t->left!=NULL)
//             push( t->left);
//         // Push right child
//         if (t->right!=NULL)
//             push( t->right);
//     }
//     return root;
// }


struct node* mirrorImage(struct node *root)
{
    if(root==NULL)
    {
        return root;
    }
    struct node *temp,*t;
    push(root);
    while(top!=NULL)
    {
        t=pop();
        temp= t->left;
        t->left = t->right;
        t->right=temp;

        if(t->left!=NULL)
        {
            push(t->left);
        }
        if(t->right!=NULL)
        {
            push(t->right);
        }
        
    }
    return root;

}

void levelOrderTraversal(struct node* root) {
   struct node* temp;
   
    if(root == NULL) {
        return;
    }
    pushQueue(root);
    int c=0;
    while(front != NULL) {

        temp = popQueue();

        printf("%d ",temp->data);

        if(temp->left != NULL) {
            pushQueue(temp->left);
        }
        if(temp->right != NULL) {
            pushQueue(temp->right);
        }
        c++;  

    }
    printf("      %d",c);
} 

void printLeafNode(struct node *root)
{
    if (root == NULL)
        return;

    printLeafNode(root->right);  

    if (root->left == NULL && root->right == NULL)
    {    printf("%d ", root->data); }

    printLeafNode(root->left);
   

}

void printLeafNodeWithOutRecurrsion(struct node *root) {
    struct node *temp ;
    while(root==NULL)
    {
        return ;
    }
    push(root);
    while(top!=NULL)
    {
        temp = pop();
        if(temp->left==NULL && temp->right==NULL)
        {
            printf("%d ",temp->data);
        }
         if(temp->left)
        {
            push(temp->left);
        }
        if(temp->right)
        {
            push(temp->right);
        }
       

    }
}


// void height(struct node *root)
// {
//     if(root==NULL);
//     {
   
//     }
//     struct node *temp;
//     int size = 0;
//     int c=0;
//     pushQueue(root);
//     size++;
//     c = size;
//     int height=0;
//     while(front!=NULL)
//     {
//        for(int i=0;i<size;i++)
//        {
//           temp = popQueue();
//           c--;
//           if(temp->left!=NULL)
//           {
//             pushQueue(temp->left);
//             c++;
//           }

//           if(temp->right!=NULL)
//           {
//             pushQueue(temp->right);
//             c++;
//           }
//        }
//        height++;
//        size = c;
 
//     }
//    printf("%d ",height-1);
// }


void heightBinaryTree(struct node *root)
{
    if(root==NULL)
    {
        return ;
    }
    int size =0;
    int c=0;
    int height=0;
    struct node *t=NULL;
    pushQueue(root);
    size++;
    c = size;
    while(front!=NULL)
    {
        for(int i=1;i<=size;i++)
        {
            t = popQueue();
            c--;
            if(t->left!=NULL)
            {
                pushQueue(t->left);
                c++;
            }
            if(t->right!=NULL)
            {
                pushQueue(t->right);
                c++;
            }

        }
        size = c;
        height++;
    }
    printf("%d",height);

}

int main() {
struct node *root = NULL;
root = insert(root,50);
root = insert(root,40);
root = insert(root,60);
root = insert(root,35);
root = insert(root,45);







heightBinaryTree(root);
}
