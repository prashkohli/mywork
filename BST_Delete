#include<stdio.h>
#include<stdlib.h>

struct node {
	int data;
	struct node *left;
	struct node *right;
};

struct node *root=NULL;

struct queue{
	struct node *node;
	struct queue *next;
};

struct queue *rear=NULL;
struct queue *front=NULL;

void enqueue(struct node *root){
	struct queue * q=(struct queue*)malloc(sizeof(struct queue));
	q->node=root;
	q->next=NULL;
	
	if(front==NULL && rear==NULL){
		front=q;
		rear=q;
	}
	else{
		rear->next=q;
		rear=q;
	}
	
}

struct node *dequeue(){
	struct node *temp=NULL;
	if(front==NULL && rear==NULL){
		printf("The Queue is empty");
	}
	else{
		struct queue *tempQueue = front;
		temp=front->node;
		front=front->next;
		
		if(front==NULL){
			rear=NULL;
		}
		free(tempQueue);
	}
	return temp;
}

struct node *create(int data){
	struct node * newnode=(struct node *)malloc(sizeof(struct node));
	newnode->data=data;
	newnode->left=NULL;
	newnode->right=NULL;
	return newnode;
}

struct node *insert(struct node *root, int data){
	if(root==NULL){
		return create(data);
	}
	else if(data<root->data){
		root->left=insert(root->left,data);
	}
	else if(data>root->data){
		root->right=insert(root->right,data);
	}
	return root;
}
void postorder(struct node *root)
{
    struct node *t;
    struct node *prev;
    while(root!=NULL)
    {
        push(root);
        root = root ->left;
    }
    while (top!=NULL)
    {
        t = pop();
        if(t->right==NULL || t->right == prev)
        {
            printf("%d ",t->data);
            prev = t;
        }
        else
        {
            push(t);
            t = t->right;
            while(t!=NULL)
            {
                push(t);
                t = t->left;
            }
        }
    }

void inorder(struct node *root){
	if(root==NULL){
		return;
	}
	inorder(root->left);
	printf("%d ",root->data);
	inorder(root->right);
}


void preorder(struct node *root){
	if(root==NULL){
		return;
	}
	printf("%d ",root->data);
	preorder(root->left);
	preorder(root->right);
}


void levelwise(struct node *root){
	enqueue(root);
	
	while(front!=NULL){
		struct node *curr=dequeue();
		printf("%d ",curr->data);
		
		if(curr->left!=NULL){
			enqueue(curr->left);
		}
		if(curr->right!=NULL){
			enqueue(curr->right);
		}
		
	}
}

struct node *findMin(struct node *root) {
    struct node *temp = root;
    while (temp && temp->left != NULL) {
        temp = temp->left;
    }
    return temp;
}

struct node *delete(struct node *root, int data) {
    if (root == NULL) {
        return NULL;
    }
    if (data < root->data) {
        root->left = delete(root->left, data);
    } else if (data > root->data) {
        root->right = delete(root->right, data);
    } else {
        if (root->left == NULL) {
            struct node *temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct node *temp = root->left;
            free(root);
            return temp;
        } else {
            struct node *temp = findMin(root->right);
            root->data = temp->data;
            root->right = delete(root->right, temp->data);
        }
    }
    return root;
}


void main(){
	struct node *root=NULL;
	root=insert(root,45);
	insert(root,23);
	insert(root,90);
	insert(root,15);
	insert(root,25);
	
	inorder(root);
	printf("\n");
	preorder(root);
	printf("\n");
	postorder(root);
	printf("\n");
	levelwise(root);
	
	delete(root,45);
	printf("\n");
	inorder(root);
	printf("\n");
}
