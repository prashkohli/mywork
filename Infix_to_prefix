#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Stack for operators
char stack[MAX];
int top = -1;

void push(char item) {
    if (top >= MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = item;
}

char pop() {
    if (top < 0) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack[top--];
}

char peek() {
    if (top < 0) {
        return -1;
    }
    return stack[top];
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}

int precedence(char c) {
    if (c == '^') {
        return 3;
    } else if (c == '*' || c == '/') {
        return 2;
    } else if (c == '+' || c == '-') {
        return 1;
    }
    return 0;
}

void reverse(char *exp) {
    int length = strlen(exp);
    for (int i = 0; i < length / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[length - i - 1];
        exp[length - i - 1] = temp;
    }
}

void replaceBrackets(char *exp) {
    for (int i = 0; exp[i] != '\0'; i++) {
        if (exp[i] == '(') {
            exp[i] = ')';
        } else if (exp[i] == ')') {
            exp[i] = '(';
        }
    }
}

void infixToPostfix(char *exp, char *result) {
    int k = 0;
    for (int i = 0; exp[i] != '\0'; i++) {
        if (isalnum(exp[i])) {
            result[k++] = exp[i];
        } else if (exp[i] == '(') {
            push(exp[i]);
        } else if (exp[i] == ')') {
            while (peek() != '(' && top != -1) {
                result[k++] = pop();
            }
            pop(); // pop '('
        } else if (isOperator(exp[i])) {
            while (top != -1 && precedence(peek()) >= precedence(exp[i])) {
                result[k++] = pop();
            }
            push(exp[i]);
        }
    }
    while (top != -1) {
        result[k++] = pop();
    }
    result[k] = '\0';
}

void infixToPrefix(char *exp, char *result) {
    reverse(exp);
    replaceBrackets(exp);
    infixToPostfix(exp, result);
    reverse(result);
}

int main() {
    char expression[MAX];
    char result[MAX];

    printf("Enter the infix expression: ");
    fgets(expression, MAX, stdin);
    expression[strcspn(expression, "\n")] = 0;  // Remove newline character

    printf("The infix expression is: %s\n", expression);

    infixToPrefix(expression, result);

    printf("The prefix expression is: %s\n", result);

    return 0;
}
