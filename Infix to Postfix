#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack[MAX], infix[MAX], postfix[MAX];
int top = -1;

int precedence(char ch) {
    if (ch == '+' || ch == '-') {
        return 1;
    }
    if (ch == '*' || ch == '/') {
        return 2;
    }
    return 0;
}

void push(char ch) {
    if (top >= MAX - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = ch;
}

char pop() {
    if (top < 0) {
        printf("Stack underflow\n");
        return -1;
    }
    return stack[top--];
}

void infixToPostfix() {
    int j = 0;
    for (int i = 0; i < strlen(infix); i++) {
        char ch = infix[i];
        if (isalnum(ch)) {
            postfix[j++] = ch;
        } else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            while (top > -1 && precedence(ch) <= precedence(stack[top])) {
                postfix[j++] = pop();
            }
            push(ch);
        } else if (ch == '(') {
            push(ch);
        } else if (ch == ')') {
            while (top > -1 && stack[top] != '(') {
                postfix[j++] = pop();
            }
            pop();  // Pop the '('
        }
    }
    while (top > -1) {
        postfix[j++] = pop();
    }
    postfix[j] = '\0';  // Null terminate the postfix expression
}

int main() {
    printf("Enter infix expression: ");
    if (fgets(infix, MAX, stdin) != NULL) {
        infix[strcspn(infix, "\n")] = '\0';  // Remove newline character
        infixToPostfix();
        printf("Postfix expression: %s\n", postfix);
    } else {
        printf("Error reading input\n");
    }
    return 0;
}
