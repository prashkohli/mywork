#include <stdio.h>
#include <stdlib.h>

// Define the structure of a tree node
struct node {
    int data;
    struct node *left;
    struct node *right;
};

// Define the structure for a queue node (for level order traversal)
struct queueNode {
    struct node *T;
    struct queueNode *next;
};

// Define the structure for a stack node (for iterative traversals and mirror)
struct stackNode {
    struct node *T;
    struct stackNode *next;
};

// Global pointers for stack and queue operations
struct stackNode *top = NULL;
struct queueNode *front = NULL;
struct queueNode *rear = NULL;

// Function to create a new tree node
struct node *createNode(int data) {
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the BST
struct node *insert(struct node *root, int data) {
    if (root == NULL) {
        root = createNode(data);
    } else if (data < root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}

// Function to push a node onto the stack
void push(struct node *root) {
    struct stackNode *newNode = (struct stackNode *)malloc(sizeof(struct stackNode));
    newNode->T = root;
    newNode->next = top;
    top = newNode;
}

// Function to pop a node from the stack
struct node *pop() {
    if (top == NULL) {
        printf("Stack is empty\n");
        return NULL;
    }
    struct stackNode *temp = top;
    struct node *res = temp->T;
    top = top->next;
    free(temp);
    return res;
}

// Function to enqueue a node into the queue
void pushQueue(struct node *root) {
    struct queueNode *newNode = (struct queueNode *)malloc(sizeof(struct queueNode));
    newNode->T = root;
    newNode->next = NULL;
    if (rear == NULL) {
        front = rear = newNode;
    } else {
        rear->next = newNode;
        rear = newNode;
    }
}

// Function to dequeue a node from the queue
struct node *popQueue() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return NULL;
    }
    struct queueNode *temp = front;
    struct node *res = temp->T;
    front = front->next;
    if (front == NULL) {
        rear = NULL;
    }
    free(temp);
    return res;
}

// Function to create the mirror image of the tree without disturbing the original
struct node *createMirror(struct node *root) {
    if (root == NULL) return NULL;

    struct node *mirrorRoot = createNode(root->data);
    mirrorRoot->left = createMirror(root->right);
    mirrorRoot->right = createMirror(root->left);
    return mirrorRoot;
}

// Function to create the mirror image of the tree iteratively
struct node *mirrorImage(struct node *root) {
    if (root == NULL) return root;
    struct node *t, *temp;
    push(root);
    while (top != NULL) {
        t = pop();
        temp = t->left;
        t->left = t->right;
        t->right = temp;
        if (t->left != NULL) push(t->left);
        if (t->right != NULL) push(t->right);
    }
    return root;
}

// Function to calculate the height of the tree using non-recursion
int heightBinaryTree(struct node *root) {
    if (root == NULL) return 0;

    int height = 0;
    pushQueue(root);
    while (front != NULL) {
        int size = 0;
        struct queueNode *temp = front;
        while (temp != NULL) {
            size++;
            temp = temp->next;
        }

		int i ;
        for (i= 0; i < size; i++) {
            struct node *current = popQueue();
            if (current->left != NULL) pushQueue(current->left);
            if (current->right != NULL) pushQueue(current->right);
        }
        height++;
    }
    return height;
}

// Function to perform pre-order traversal
void preorder(struct node *root) {
    if (root == NULL) return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

// Main function
int main() {
    struct node *root = NULL;

    // Insert nodes into the BST
    root = insert(root, 50);
    root = insert(root, 40);
    root = insert(root, 60);
    root = insert(root, 35);
    root = insert(root, 45);

    printf("Original Tree (Pre-order):\n");
    preorder(root);
    printf("\n");

    struct node *mirrorRoot = createMirror(root);
    printf("Mirror Image (Pre-order) without disturbing original tree:\n");
    preorder(mirrorRoot);
    printf("\n");

    mirrorImage(root);
    printf("Mirror Image (Pre-order) by modifying original tree:\n");
    preorder(root);
    printf("\n");

    int height = heightBinaryTree(root);
    printf("Height of the tree: %d\n", height);

    return 0;
}
