#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct queue {
    int data;
    struct queue *next;
};

struct stack {
    int data;
    struct stack *prev;
};
struct stack *top = NULL;

void push(int data) {
    struct stack *newnode = (struct stack *)malloc(sizeof(struct stack));
    newnode->data = data;
    newnode->prev = NULL;
    if (top != NULL) {
        newnode->prev = top;
    }
    top = newnode;
}

int pop() {
    if (top == NULL) {
        printf("Empty\n");
        return -1;  
    }
    int t = top->data;
    struct stack *temp = top;
    top = top->prev;
    free(temp);
    return t;
}

struct queue *front = NULL, *rear = NULL;

void enqueue(int data) {
    struct queue *newnode = (struct queue *)malloc(sizeof(struct queue));
    newnode->data = data;
    newnode->next = NULL;
    if (front == NULL) {
        front = rear = newnode;
    } else {
        rear->next = newnode;
        rear = newnode;
    }
}

int dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return -1;
    }
    int temp;
    struct queue *t = front;
    temp = front->data;
    front = front->next;
    free(t);
    if (front == NULL) {
        rear = NULL;
    }
    return temp;
}

void createADJMatrix() {
    int v;
    printf("Enter the no of vertices: ");
    scanf("%d", &v);
    int a[100][100];  
    int i,j;
    for (i = 0; i < v; i++) {
        for (j = 0; j < v; j++) {
            a[i][j] = 0;
        }
    }

    int st, en;
    printf("Enter the no of edges: ");
    int e;
    scanf("%d", &e);
    for (i = 0; i < e; i++) {
        printf("Enter the start and end: ");
        scanf("%d %d", &st, &en);
        a[st][en] = a[en][st] = 1;
    }
    
    printf("\nDFS:");
    DFSMatrix(a,v);
    printf("\nBFS:");
    BFSMatrix(a,v);
}

void createAdjlist() {
    int v;
    printf("Enter no of vertices: ");
    scanf("%d", &v);
    struct node *A[v];
    int i;
    for (i = 0; i < v; i++) {
        A[i] = NULL;
    }
    int n;
    struct node *temp;
    int neigh;
    int j;

    for (i = 0; i < v; i++) {
        printf("Enter the no of edges of %d: ", i);
        scanf("%d", &n);
        temp = NULL;
        for (j = 0; j < n; j++) {
            printf("Enter the neighbour: ");
            scanf("%d", &neigh);
            struct node *newnode = (struct node *)malloc(sizeof(struct node));
            if (!newnode) {
                printf("Memory allocation failed\n");
                return;
            }
            newnode->data = neigh;
            newnode->next = NULL;
            if (A[i] == NULL) {
                A[i] = newnode;
            } else {
                temp->next = newnode;
            }
            temp = newnode;
        }
    }
    printf("\nDFS:");
    DFSList(A, v);
    printf("\nBFS:");
    BFSList(A, v);
}

void BFSMatrix(int a[][100], int v) {
    int st;
    printf("Enter start: ");
    scanf("%d", &st);
    int vis[v];
    int i;
    for (i = 0; i < v; i++) {
        vis[i] = 0;
    }

    enqueue(st);
    vis[st] = 1;
    int u;
    while (front != NULL) {
        u = dequeue();
        printf("%d ", u);
        for (i = 0; i < v; i++) {
            if (a[u][i] == 1 && vis[i] == 0) {
                enqueue(i);
                vis[i] = 1;
            }
        }
    }
}

void BFSList(struct node *A[], int v) {
    int u;
    printf("Enter start: ");
    scanf("%d", &u);
    int vis[v];
    int i;
    for (i = 0; i < v; i++) {
        vis[i] = 0;
    }
    struct node *temp;
    enqueue(u);
    vis[u] = 1;
    while (front != NULL) {
        u = dequeue();
        printf("%d ", u);
        temp = A[u];
        while (temp != NULL) {
            if (vis[temp->data] == 0) {
                enqueue(temp->data);
                vis[temp->data] = 1;
            }
            temp = temp->next;
        }
    }
}

int peek() {
    if (top != NULL) {
        return top->data;
    }
    return -1;  
}

void DFSMatrix(int a[][100], int v) {
    int u;
    printf("Enter start: ");
    scanf("%d", &u);
    int vis[v];
    int i;
    for (i = 0; i < v; i++) {
        vis[i] = 0;
    }
    push(u);
    vis[u] = 1;
    printf("%d ", u);
    while (top != NULL) {
    	int i;
        for (i = 0; i < v; i++) {
            if (a[u][i] == 1 && vis[i] == 0) {
                u = i;
                push(i);
                printf("%d ", i);
                vis[i] = 1;
                i = 0;
            }
        }
        pop();
        u = peek();
    }
}

void DFSList(struct node *A[], int v) {
    int u;
    struct node *temp;
    printf("Enter start: ");
    scanf("%d", &u);
    int vis[v];
    int i;
    for (i = 0; i < v; i++) {
        vis[i] = 0;
    }
    push(u);
    vis[u] = 1;
    printf("%d ", u);
    while (top != NULL) {
        temp = A[u];
        while (temp != NULL) {
            if (vis[temp->data] == 0) {
                push(temp->data);
                printf("%d ", temp->data);
                u = temp->data;
                vis[u] = 1;
                temp = A[u];
            } else {
                temp = temp->next;
            }
        }
        pop();
        u = peek();
    }
}

int main() {
	createADJMatrix();
    createAdjlist();
    return 0;
}
