/*
5
6
0 1
0 2
1 2
1 3
2 4
3 4
0
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

void createGraph(int adjMatrix[MAX][MAX], int *vertices);
void displayMatrix(int adjMatrix[MAX][MAX], int vertices);
void DFS(int adjMatrix[MAX][MAX], int vertices, int startVertex, int visited[]);

int main() {
    int adjMatrix[MAX][MAX];
    int vertices, startVertex;
    int visited[MAX] = {0};

    createGraph(adjMatrix, &vertices);
    displayMatrix(adjMatrix, vertices);

    printf("Enter the starting vertex for DFS: ");
    scanf("%d", &startVertex);

    printf("DFS Traversal starting from vertex %d: ", startVertex);
    DFS(adjMatrix, vertices, startVertex, visited);

    return 0;
}

void createGraph(int adjMatrix[MAX][MAX], int *vertices) {
    int i, j, edges, src, dest;

    printf("Enter the number of vertices: ");
    scanf("%d", vertices);

    for (i = 0; i < *vertices; i++) {
        for (j = 0; j < *vertices; j++) {
            adjMatrix[i][j] = 0;
        }
    }

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    for (i = 0; i < edges; i++) {
        printf("Enter edge (source destination): ");
        scanf("%d %d", &src, &dest);
        adjMatrix[src][dest] = 1;
        adjMatrix[dest][src] = 1;  // For undirected graph
    }
}

void displayMatrix(int adjMatrix[MAX][MAX], int vertices) {
    int i, j;

    printf("Adjacency Matrix:\n");
    for (i = 0; i < vertices; i++) {
        for (j = 0; j < vertices; j++) {
            printf("%d ", adjMatrix[i][j]);
        }
        printf("\n");
    }
}

void DFS(int adjMatrix[MAX][MAX], int vertices, int startVertex, int visited[]) {
    printf("%d ", startVertex);
    visited[startVertex] = 1;

    for (int i = 0; i < vertices; i++) {
        if (adjMatrix[startVertex][i] == 1 && !visited[i]) {
            DFS(adjMatrix, vertices, i, visited);
        }
    }
}
